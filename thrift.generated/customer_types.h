/**
 * Autogenerated by Thrift Compiler (0.11.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef customer_TYPES_H
#define customer_TYPES_H

#include <iosfwd>

#include <thrift/Thrift.h>
#include <thrift/TApplicationException.h>
#include <thrift/TBase.h>
#include <thrift/protocol/TProtocol.h>
#include <thrift/transport/TTransport.h>

#include <thrift/stdcxx.h>




enum PhoneType {
  LANDLINE = 1,
  MOBILE = 2
};

extern const std::map<int, const char*> _PhoneType_VALUES_TO_NAMES;

std::ostream& operator<<(std::ostream& out, const PhoneType val);

enum ErrorCode {
  PARAMETER = 1,
  NOT_FOUND = 2,
  ALREADY_EXISTS = 3,
  SERVER = 99
};

extern const std::map<int, const char*> _ErrorCode_VALUES_TO_NAMES;

std::ostream& operator<<(std::ostream& out, const ErrorCode val);

enum Mapper {
  MANUAL = 1,
  DOZER = 2,
  MAPSTRUCT = 3
};

extern const std::map<int, const char*> _Mapper_VALUES_TO_NAMES;

std::ostream& operator<<(std::ostream& out, const Mapper val);

class Phone;

class Address;

class Customer;

class CustomerException;

class Header;

class CreateRequest;

class GetRequest;

class ListAllRequest;

class StatsException;

class ClientCall;

class TestSuite;

typedef struct _Phone__isset {
  _Phone__isset() : type(false), number(false) {}
  bool type :1;
  bool number :1;
} _Phone__isset;

class Phone {
 public:

  Phone(const Phone&);
  Phone(Phone&&);
  Phone& operator=(const Phone&);
  Phone& operator=(Phone&&);
  Phone() : type((PhoneType)0), number() {
  }

  virtual ~Phone() throw();
  PhoneType type;
  std::string number;

  _Phone__isset __isset;

  void __set_type(const PhoneType val);

  void __set_number(const std::string& val);

  bool operator == (const Phone & rhs) const
  {
    if (!(type == rhs.type))
      return false;
    if (!(number == rhs.number))
      return false;
    return true;
  }
  bool operator != (const Phone &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Phone & ) const;

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(Phone &a, Phone &b);

std::ostream& operator<<(std::ostream& out, const Phone& obj);

typedef struct _Address__isset {
  _Address__isset() : lines(false), zipCode(false), city(false), country(false) {}
  bool lines :1;
  bool zipCode :1;
  bool city :1;
  bool country :1;
} _Address__isset;

class Address {
 public:

  Address(const Address&);
  Address(Address&&);
  Address& operator=(const Address&);
  Address& operator=(Address&&);
  Address() : zipCode(), city(), country() {
  }

  virtual ~Address() throw();
  std::vector<std::string>  lines;
  std::string zipCode;
  std::string city;
  std::string country;

  _Address__isset __isset;

  void __set_lines(const std::vector<std::string> & val);

  void __set_zipCode(const std::string& val);

  void __set_city(const std::string& val);

  void __set_country(const std::string& val);

  bool operator == (const Address & rhs) const
  {
    if (!(lines == rhs.lines))
      return false;
    if (!(zipCode == rhs.zipCode))
      return false;
    if (!(city == rhs.city))
      return false;
    if (!(country == rhs.country))
      return false;
    return true;
  }
  bool operator != (const Address &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Address & ) const;

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(Address &a, Address &b);

std::ostream& operator<<(std::ostream& out, const Address& obj);

typedef struct _Customer__isset {
  _Customer__isset() : id(false), firstName(false), lastName(false), birthDate(false), email(false), address(false), phones(false) {}
  bool id :1;
  bool firstName :1;
  bool lastName :1;
  bool birthDate :1;
  bool email :1;
  bool address :1;
  bool phones :1;
} _Customer__isset;

class Customer {
 public:

  Customer(const Customer&);
  Customer(Customer&&);
  Customer& operator=(const Customer&);
  Customer& operator=(Customer&&);
  Customer() : id(), firstName(), lastName(), birthDate(0), email() {
  }

  virtual ~Customer() throw();
  std::string id;
  std::string firstName;
  std::string lastName;
  int64_t birthDate;
  std::string email;
  Address address;
  std::vector<Phone>  phones;

  _Customer__isset __isset;

  void __set_id(const std::string& val);

  void __set_firstName(const std::string& val);

  void __set_lastName(const std::string& val);

  void __set_birthDate(const int64_t val);

  void __set_email(const std::string& val);

  void __set_address(const Address& val);

  void __set_phones(const std::vector<Phone> & val);

  bool operator == (const Customer & rhs) const
  {
    if (!(id == rhs.id))
      return false;
    if (!(firstName == rhs.firstName))
      return false;
    if (!(lastName == rhs.lastName))
      return false;
    if (!(birthDate == rhs.birthDate))
      return false;
    if (!(email == rhs.email))
      return false;
    if (!(address == rhs.address))
      return false;
    if (!(phones == rhs.phones))
      return false;
    return true;
  }
  bool operator != (const Customer &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Customer & ) const;

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(Customer &a, Customer &b);

std::ostream& operator<<(std::ostream& out, const Customer& obj);

typedef struct _CustomerException__isset {
  _CustomerException__isset() : code(false), message(false) {}
  bool code :1;
  bool message :1;
} _CustomerException__isset;

class CustomerException : public ::apache::thrift::TException {
 public:

  CustomerException(const CustomerException&);
  CustomerException(CustomerException&&);
  CustomerException& operator=(const CustomerException&);
  CustomerException& operator=(CustomerException&&);
  CustomerException() : code((ErrorCode)0), message() {
  }

  virtual ~CustomerException() throw();
  ErrorCode code;
  std::string message;

  _CustomerException__isset __isset;

  void __set_code(const ErrorCode val);

  void __set_message(const std::string& val);

  bool operator == (const CustomerException & rhs) const
  {
    if (!(code == rhs.code))
      return false;
    if (!(message == rhs.message))
      return false;
    return true;
  }
  bool operator != (const CustomerException &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CustomerException & ) const;

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

  virtual void printTo(std::ostream& out) const;
  mutable std::string thriftTExceptionMessageHolder_;
  const char* what() const throw();
};

void swap(CustomerException &a, CustomerException &b);

std::ostream& operator<<(std::ostream& out, const CustomerException& obj);

typedef struct _Header__isset {
  _Header__isset() : requestSeq(false), mapper(false) {}
  bool requestSeq :1;
  bool mapper :1;
} _Header__isset;

class Header {
 public:

  Header(const Header&);
  Header(Header&&);
  Header& operator=(const Header&);
  Header& operator=(Header&&);
  Header() : requestSeq(0), mapper((Mapper)0) {
  }

  virtual ~Header() throw();
  int32_t requestSeq;
  Mapper mapper;

  _Header__isset __isset;

  void __set_requestSeq(const int32_t val);

  void __set_mapper(const Mapper val);

  bool operator == (const Header & rhs) const
  {
    if (!(requestSeq == rhs.requestSeq))
      return false;
    if (!(mapper == rhs.mapper))
      return false;
    return true;
  }
  bool operator != (const Header &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Header & ) const;

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(Header &a, Header &b);

std::ostream& operator<<(std::ostream& out, const Header& obj);

typedef struct _CreateRequest__isset {
  _CreateRequest__isset() : header(false), customer(false) {}
  bool header :1;
  bool customer :1;
} _CreateRequest__isset;

class CreateRequest {
 public:

  CreateRequest(const CreateRequest&);
  CreateRequest(CreateRequest&&);
  CreateRequest& operator=(const CreateRequest&);
  CreateRequest& operator=(CreateRequest&&);
  CreateRequest() {
  }

  virtual ~CreateRequest() throw();
  Header header;
  Customer customer;

  _CreateRequest__isset __isset;

  void __set_header(const Header& val);

  void __set_customer(const Customer& val);

  bool operator == (const CreateRequest & rhs) const
  {
    if (!(header == rhs.header))
      return false;
    if (!(customer == rhs.customer))
      return false;
    return true;
  }
  bool operator != (const CreateRequest &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CreateRequest & ) const;

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(CreateRequest &a, CreateRequest &b);

std::ostream& operator<<(std::ostream& out, const CreateRequest& obj);

typedef struct _GetRequest__isset {
  _GetRequest__isset() : header(false), id(false) {}
  bool header :1;
  bool id :1;
} _GetRequest__isset;

class GetRequest {
 public:

  GetRequest(const GetRequest&);
  GetRequest(GetRequest&&);
  GetRequest& operator=(const GetRequest&);
  GetRequest& operator=(GetRequest&&);
  GetRequest() : id() {
  }

  virtual ~GetRequest() throw();
  Header header;
  std::string id;

  _GetRequest__isset __isset;

  void __set_header(const Header& val);

  void __set_id(const std::string& val);

  bool operator == (const GetRequest & rhs) const
  {
    if (!(header == rhs.header))
      return false;
    if (!(id == rhs.id))
      return false;
    return true;
  }
  bool operator != (const GetRequest &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const GetRequest & ) const;

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(GetRequest &a, GetRequest &b);

std::ostream& operator<<(std::ostream& out, const GetRequest& obj);

typedef struct _ListAllRequest__isset {
  _ListAllRequest__isset() : header(false) {}
  bool header :1;
} _ListAllRequest__isset;

class ListAllRequest {
 public:

  ListAllRequest(const ListAllRequest&);
  ListAllRequest(ListAllRequest&&);
  ListAllRequest& operator=(const ListAllRequest&);
  ListAllRequest& operator=(ListAllRequest&&);
  ListAllRequest() {
  }

  virtual ~ListAllRequest() throw();
  Header header;

  _ListAllRequest__isset __isset;

  void __set_header(const Header& val);

  bool operator == (const ListAllRequest & rhs) const
  {
    if (!(header == rhs.header))
      return false;
    return true;
  }
  bool operator != (const ListAllRequest &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ListAllRequest & ) const;

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(ListAllRequest &a, ListAllRequest &b);

std::ostream& operator<<(std::ostream& out, const ListAllRequest& obj);

typedef struct _StatsException__isset {
  _StatsException__isset() : message(false) {}
  bool message :1;
} _StatsException__isset;

class StatsException : public ::apache::thrift::TException {
 public:

  StatsException(const StatsException&);
  StatsException(StatsException&&);
  StatsException& operator=(const StatsException&);
  StatsException& operator=(StatsException&&);
  StatsException() : message() {
  }

  virtual ~StatsException() throw();
  std::string message;

  _StatsException__isset __isset;

  void __set_message(const std::string& val);

  bool operator == (const StatsException & rhs) const
  {
    if (!(message == rhs.message))
      return false;
    return true;
  }
  bool operator != (const StatsException &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const StatsException & ) const;

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

  virtual void printTo(std::ostream& out) const;
  mutable std::string thriftTExceptionMessageHolder_;
  const char* what() const throw();
};

void swap(StatsException &a, StatsException &b);

std::ostream& operator<<(std::ostream& out, const StatsException& obj);

typedef struct _ClientCall__isset {
  _ClientCall__isset() : protocol(true), errMsg(false) {}
  bool protocol :1;
  bool errMsg :1;
} _ClientCall__isset;

class ClientCall {
 public:

  ClientCall(const ClientCall&);
  ClientCall(ClientCall&&);
  ClientCall& operator=(const ClientCall&);
  ClientCall& operator=(ClientCall&&);
  ClientCall() : requestSeq(0), protocol("thrift"), method(), clientStart(0), clientEnd(0), ok(false), errMsg() {
  }

  virtual ~ClientCall() throw();
  int32_t requestSeq;
  std::string protocol;
  std::string method;
  int64_t clientStart;
  int64_t clientEnd;
  bool ok;
  std::string errMsg;

  _ClientCall__isset __isset;

  void __set_requestSeq(const int32_t val);

  void __set_protocol(const std::string& val);

  void __set_method(const std::string& val);

  void __set_clientStart(const int64_t val);

  void __set_clientEnd(const int64_t val);

  void __set_ok(const bool val);

  void __set_errMsg(const std::string& val);

  bool operator == (const ClientCall & rhs) const
  {
    if (!(requestSeq == rhs.requestSeq))
      return false;
    if (!(protocol == rhs.protocol))
      return false;
    if (!(method == rhs.method))
      return false;
    if (!(clientStart == rhs.clientStart))
      return false;
    if (!(clientEnd == rhs.clientEnd))
      return false;
    if (!(ok == rhs.ok))
      return false;
    if (!(errMsg == rhs.errMsg))
      return false;
    return true;
  }
  bool operator != (const ClientCall &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ClientCall & ) const;

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(ClientCall &a, ClientCall &b);

std::ostream& operator<<(std::ostream& out, const ClientCall& obj);

typedef struct _TestSuite__isset {
  _TestSuite__isset() : id(false), compression(false), protocol(false), comment(false), mapper(false) {}
  bool id :1;
  bool compression :1;
  bool protocol :1;
  bool comment :1;
  bool mapper :1;
} _TestSuite__isset;

class TestSuite {
 public:

  TestSuite(const TestSuite&);
  TestSuite(TestSuite&&);
  TestSuite& operator=(const TestSuite&);
  TestSuite& operator=(TestSuite&&);
  TestSuite() : id(), nbThread(0), compression(), cpu(), memory(), jvm(), vendor(), osFamily(), osVersion(), protocol(), comment(), mapper((Mapper)0) {
  }

  virtual ~TestSuite() throw();
  std::string id;
  int32_t nbThread;
  std::string compression;
  std::string cpu;
  std::string memory;
  std::string jvm;
  std::string vendor;
  std::string osFamily;
  std::string osVersion;
  std::string protocol;
  std::string comment;
  std::vector<ClientCall>  calls;
  Mapper mapper;

  _TestSuite__isset __isset;

  void __set_id(const std::string& val);

  void __set_nbThread(const int32_t val);

  void __set_compression(const std::string& val);

  void __set_cpu(const std::string& val);

  void __set_memory(const std::string& val);

  void __set_jvm(const std::string& val);

  void __set_vendor(const std::string& val);

  void __set_osFamily(const std::string& val);

  void __set_osVersion(const std::string& val);

  void __set_protocol(const std::string& val);

  void __set_comment(const std::string& val);

  void __set_calls(const std::vector<ClientCall> & val);

  void __set_mapper(const Mapper val);

  bool operator == (const TestSuite & rhs) const
  {
    if (!(id == rhs.id))
      return false;
    if (!(nbThread == rhs.nbThread))
      return false;
    if (__isset.compression != rhs.__isset.compression)
      return false;
    else if (__isset.compression && !(compression == rhs.compression))
      return false;
    if (!(cpu == rhs.cpu))
      return false;
    if (!(memory == rhs.memory))
      return false;
    if (!(jvm == rhs.jvm))
      return false;
    if (!(vendor == rhs.vendor))
      return false;
    if (!(osFamily == rhs.osFamily))
      return false;
    if (!(osVersion == rhs.osVersion))
      return false;
    if (!(protocol == rhs.protocol))
      return false;
    if (!(comment == rhs.comment))
      return false;
    if (!(calls == rhs.calls))
      return false;
    if (!(mapper == rhs.mapper))
      return false;
    return true;
  }
  bool operator != (const TestSuite &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TestSuite & ) const;

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(TestSuite &a, TestSuite &b);

std::ostream& operator<<(std::ostream& out, const TestSuite& obj);



#include "customer_types.tcc"

#endif
