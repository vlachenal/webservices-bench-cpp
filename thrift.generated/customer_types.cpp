/**
 * Autogenerated by Thrift Compiler (0.11.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#include "customer_types.h"

#include <algorithm>
#include <ostream>

#include <thrift/TToString.h>



int _kPhoneTypeValues[] = {
  LANDLINE,
  MOBILE
};
const char* _kPhoneTypeNames[] = {
  "LANDLINE",
  "MOBILE"
};
const std::map<int, const char*> _PhoneType_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(2, _kPhoneTypeValues, _kPhoneTypeNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));

std::ostream& operator<<(std::ostream& out, const PhoneType val) {
  std::map<int, const char*>::const_iterator it = _PhoneType_VALUES_TO_NAMES.find(val);
  if (it != _PhoneType_VALUES_TO_NAMES.end()) {
    out << it->second;
  } else {
    out << static_cast<int>(val);
  }
  return out;
}

int _kErrorCodeValues[] = {
  PARAMETER,
  NOT_FOUND,
  ALREADY_EXISTS,
  SERVER
};
const char* _kErrorCodeNames[] = {
  "PARAMETER",
  "NOT_FOUND",
  "ALREADY_EXISTS",
  "SERVER"
};
const std::map<int, const char*> _ErrorCode_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(4, _kErrorCodeValues, _kErrorCodeNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));

std::ostream& operator<<(std::ostream& out, const ErrorCode val) {
  std::map<int, const char*>::const_iterator it = _ErrorCode_VALUES_TO_NAMES.find(val);
  if (it != _ErrorCode_VALUES_TO_NAMES.end()) {
    out << it->second;
  } else {
    out << static_cast<int>(val);
  }
  return out;
}

int _kMapperValues[] = {
  MANUAL,
  DOZER,
  MAPSTRUCT
};
const char* _kMapperNames[] = {
  "MANUAL",
  "DOZER",
  "MAPSTRUCT"
};
const std::map<int, const char*> _Mapper_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(3, _kMapperValues, _kMapperNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));

std::ostream& operator<<(std::ostream& out, const Mapper val) {
  std::map<int, const char*>::const_iterator it = _Mapper_VALUES_TO_NAMES.find(val);
  if (it != _Mapper_VALUES_TO_NAMES.end()) {
    out << it->second;
  } else {
    out << static_cast<int>(val);
  }
  return out;
}


Phone::~Phone() throw() {
}


void Phone::__set_type(const PhoneType val) {
  this->type = val;
}

void Phone::__set_number(const std::string& val) {
  this->number = val;
}
std::ostream& operator<<(std::ostream& out, const Phone& obj)
{
  obj.printTo(out);
  return out;
}


void swap(Phone &a, Phone &b) {
  using ::std::swap;
  swap(a.type, b.type);
  swap(a.number, b.number);
  swap(a.__isset, b.__isset);
}

Phone::Phone(const Phone& other1) {
  type = other1.type;
  number = other1.number;
  __isset = other1.__isset;
}
Phone::Phone( Phone&& other2) {
  type = std::move(other2.type);
  number = std::move(other2.number);
  __isset = std::move(other2.__isset);
}
Phone& Phone::operator=(const Phone& other3) {
  type = other3.type;
  number = other3.number;
  __isset = other3.__isset;
  return *this;
}
Phone& Phone::operator=(Phone&& other4) {
  type = std::move(other4.type);
  number = std::move(other4.number);
  __isset = std::move(other4.__isset);
  return *this;
}
void Phone::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "Phone(";
  out << "type=" << to_string(type);
  out << ", " << "number=" << to_string(number);
  out << ")";
}


Address::~Address() throw() {
}


void Address::__set_lines(const std::vector<std::string> & val) {
  this->lines = val;
}

void Address::__set_zipCode(const std::string& val) {
  this->zipCode = val;
}

void Address::__set_city(const std::string& val) {
  this->city = val;
}

void Address::__set_country(const std::string& val) {
  this->country = val;
}
std::ostream& operator<<(std::ostream& out, const Address& obj)
{
  obj.printTo(out);
  return out;
}


void swap(Address &a, Address &b) {
  using ::std::swap;
  swap(a.lines, b.lines);
  swap(a.zipCode, b.zipCode);
  swap(a.city, b.city);
  swap(a.country, b.country);
  swap(a.__isset, b.__isset);
}

Address::Address(const Address& other11) {
  lines = other11.lines;
  zipCode = other11.zipCode;
  city = other11.city;
  country = other11.country;
  __isset = other11.__isset;
}
Address::Address( Address&& other12) {
  lines = std::move(other12.lines);
  zipCode = std::move(other12.zipCode);
  city = std::move(other12.city);
  country = std::move(other12.country);
  __isset = std::move(other12.__isset);
}
Address& Address::operator=(const Address& other13) {
  lines = other13.lines;
  zipCode = other13.zipCode;
  city = other13.city;
  country = other13.country;
  __isset = other13.__isset;
  return *this;
}
Address& Address::operator=(Address&& other14) {
  lines = std::move(other14.lines);
  zipCode = std::move(other14.zipCode);
  city = std::move(other14.city);
  country = std::move(other14.country);
  __isset = std::move(other14.__isset);
  return *this;
}
void Address::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "Address(";
  out << "lines=" << to_string(lines);
  out << ", " << "zipCode=" << to_string(zipCode);
  out << ", " << "city=" << to_string(city);
  out << ", " << "country=" << to_string(country);
  out << ")";
}


Customer::~Customer() throw() {
}


void Customer::__set_id(const std::string& val) {
  this->id = val;
}

void Customer::__set_firstName(const std::string& val) {
  this->firstName = val;
}

void Customer::__set_lastName(const std::string& val) {
  this->lastName = val;
}

void Customer::__set_birthDate(const int64_t val) {
  this->birthDate = val;
}

void Customer::__set_email(const std::string& val) {
  this->email = val;
}

void Customer::__set_address(const Address& val) {
  this->address = val;
}

void Customer::__set_phones(const std::vector<Phone> & val) {
  this->phones = val;
}
std::ostream& operator<<(std::ostream& out, const Customer& obj)
{
  obj.printTo(out);
  return out;
}


void swap(Customer &a, Customer &b) {
  using ::std::swap;
  swap(a.id, b.id);
  swap(a.firstName, b.firstName);
  swap(a.lastName, b.lastName);
  swap(a.birthDate, b.birthDate);
  swap(a.email, b.email);
  swap(a.address, b.address);
  swap(a.phones, b.phones);
  swap(a.__isset, b.__isset);
}

Customer::Customer(const Customer& other21) {
  id = other21.id;
  firstName = other21.firstName;
  lastName = other21.lastName;
  birthDate = other21.birthDate;
  email = other21.email;
  address = other21.address;
  phones = other21.phones;
  __isset = other21.__isset;
}
Customer::Customer( Customer&& other22) {
  id = std::move(other22.id);
  firstName = std::move(other22.firstName);
  lastName = std::move(other22.lastName);
  birthDate = std::move(other22.birthDate);
  email = std::move(other22.email);
  address = std::move(other22.address);
  phones = std::move(other22.phones);
  __isset = std::move(other22.__isset);
}
Customer& Customer::operator=(const Customer& other23) {
  id = other23.id;
  firstName = other23.firstName;
  lastName = other23.lastName;
  birthDate = other23.birthDate;
  email = other23.email;
  address = other23.address;
  phones = other23.phones;
  __isset = other23.__isset;
  return *this;
}
Customer& Customer::operator=(Customer&& other24) {
  id = std::move(other24.id);
  firstName = std::move(other24.firstName);
  lastName = std::move(other24.lastName);
  birthDate = std::move(other24.birthDate);
  email = std::move(other24.email);
  address = std::move(other24.address);
  phones = std::move(other24.phones);
  __isset = std::move(other24.__isset);
  return *this;
}
void Customer::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "Customer(";
  out << "id=" << to_string(id);
  out << ", " << "firstName=" << to_string(firstName);
  out << ", " << "lastName=" << to_string(lastName);
  out << ", " << "birthDate=" << to_string(birthDate);
  out << ", " << "email=" << to_string(email);
  out << ", " << "address=" << to_string(address);
  out << ", " << "phones=" << to_string(phones);
  out << ")";
}


CustomerException::~CustomerException() throw() {
}


void CustomerException::__set_code(const ErrorCode val) {
  this->code = val;
}

void CustomerException::__set_message(const std::string& val) {
  this->message = val;
}
std::ostream& operator<<(std::ostream& out, const CustomerException& obj)
{
  obj.printTo(out);
  return out;
}


void swap(CustomerException &a, CustomerException &b) {
  using ::std::swap;
  swap(a.code, b.code);
  swap(a.message, b.message);
  swap(a.__isset, b.__isset);
}

CustomerException::CustomerException(const CustomerException& other26) : TException() {
  code = other26.code;
  message = other26.message;
  __isset = other26.__isset;
}
CustomerException::CustomerException( CustomerException&& other27) : TException() {
  code = std::move(other27.code);
  message = std::move(other27.message);
  __isset = std::move(other27.__isset);
}
CustomerException& CustomerException::operator=(const CustomerException& other28) {
  code = other28.code;
  message = other28.message;
  __isset = other28.__isset;
  return *this;
}
CustomerException& CustomerException::operator=(CustomerException&& other29) {
  code = std::move(other29.code);
  message = std::move(other29.message);
  __isset = std::move(other29.__isset);
  return *this;
}
void CustomerException::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "CustomerException(";
  out << "code=" << to_string(code);
  out << ", " << "message=" << to_string(message);
  out << ")";
}

const char* CustomerException::what() const throw() {
  try {
    std::stringstream ss;
    ss << "TException - service has thrown: " << *this;
    this->thriftTExceptionMessageHolder_ = ss.str();
    return this->thriftTExceptionMessageHolder_.c_str();
  } catch (const std::exception&) {
    return "TException - service has thrown: CustomerException";
  }
}


Header::~Header() throw() {
}


void Header::__set_requestSeq(const int32_t val) {
  this->requestSeq = val;
}

void Header::__set_mapper(const Mapper val) {
  this->mapper = val;
}
std::ostream& operator<<(std::ostream& out, const Header& obj)
{
  obj.printTo(out);
  return out;
}


void swap(Header &a, Header &b) {
  using ::std::swap;
  swap(a.requestSeq, b.requestSeq);
  swap(a.mapper, b.mapper);
  swap(a.__isset, b.__isset);
}

Header::Header(const Header& other31) {
  requestSeq = other31.requestSeq;
  mapper = other31.mapper;
  __isset = other31.__isset;
}
Header::Header( Header&& other32) {
  requestSeq = std::move(other32.requestSeq);
  mapper = std::move(other32.mapper);
  __isset = std::move(other32.__isset);
}
Header& Header::operator=(const Header& other33) {
  requestSeq = other33.requestSeq;
  mapper = other33.mapper;
  __isset = other33.__isset;
  return *this;
}
Header& Header::operator=(Header&& other34) {
  requestSeq = std::move(other34.requestSeq);
  mapper = std::move(other34.mapper);
  __isset = std::move(other34.__isset);
  return *this;
}
void Header::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "Header(";
  out << "requestSeq=" << to_string(requestSeq);
  out << ", " << "mapper=" << to_string(mapper);
  out << ")";
}


CreateRequest::~CreateRequest() throw() {
}


void CreateRequest::__set_header(const Header& val) {
  this->header = val;
}

void CreateRequest::__set_customer(const Customer& val) {
  this->customer = val;
}
std::ostream& operator<<(std::ostream& out, const CreateRequest& obj)
{
  obj.printTo(out);
  return out;
}


void swap(CreateRequest &a, CreateRequest &b) {
  using ::std::swap;
  swap(a.header, b.header);
  swap(a.customer, b.customer);
  swap(a.__isset, b.__isset);
}

CreateRequest::CreateRequest(const CreateRequest& other35) {
  header = other35.header;
  customer = other35.customer;
  __isset = other35.__isset;
}
CreateRequest::CreateRequest( CreateRequest&& other36) {
  header = std::move(other36.header);
  customer = std::move(other36.customer);
  __isset = std::move(other36.__isset);
}
CreateRequest& CreateRequest::operator=(const CreateRequest& other37) {
  header = other37.header;
  customer = other37.customer;
  __isset = other37.__isset;
  return *this;
}
CreateRequest& CreateRequest::operator=(CreateRequest&& other38) {
  header = std::move(other38.header);
  customer = std::move(other38.customer);
  __isset = std::move(other38.__isset);
  return *this;
}
void CreateRequest::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "CreateRequest(";
  out << "header=" << to_string(header);
  out << ", " << "customer=" << to_string(customer);
  out << ")";
}


GetRequest::~GetRequest() throw() {
}


void GetRequest::__set_header(const Header& val) {
  this->header = val;
}

void GetRequest::__set_id(const std::string& val) {
  this->id = val;
}
std::ostream& operator<<(std::ostream& out, const GetRequest& obj)
{
  obj.printTo(out);
  return out;
}


void swap(GetRequest &a, GetRequest &b) {
  using ::std::swap;
  swap(a.header, b.header);
  swap(a.id, b.id);
  swap(a.__isset, b.__isset);
}

GetRequest::GetRequest(const GetRequest& other39) {
  header = other39.header;
  id = other39.id;
  __isset = other39.__isset;
}
GetRequest::GetRequest( GetRequest&& other40) {
  header = std::move(other40.header);
  id = std::move(other40.id);
  __isset = std::move(other40.__isset);
}
GetRequest& GetRequest::operator=(const GetRequest& other41) {
  header = other41.header;
  id = other41.id;
  __isset = other41.__isset;
  return *this;
}
GetRequest& GetRequest::operator=(GetRequest&& other42) {
  header = std::move(other42.header);
  id = std::move(other42.id);
  __isset = std::move(other42.__isset);
  return *this;
}
void GetRequest::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "GetRequest(";
  out << "header=" << to_string(header);
  out << ", " << "id=" << to_string(id);
  out << ")";
}


ListAllRequest::~ListAllRequest() throw() {
}


void ListAllRequest::__set_header(const Header& val) {
  this->header = val;
}
std::ostream& operator<<(std::ostream& out, const ListAllRequest& obj)
{
  obj.printTo(out);
  return out;
}


void swap(ListAllRequest &a, ListAllRequest &b) {
  using ::std::swap;
  swap(a.header, b.header);
  swap(a.__isset, b.__isset);
}

ListAllRequest::ListAllRequest(const ListAllRequest& other43) {
  header = other43.header;
  __isset = other43.__isset;
}
ListAllRequest::ListAllRequest( ListAllRequest&& other44) {
  header = std::move(other44.header);
  __isset = std::move(other44.__isset);
}
ListAllRequest& ListAllRequest::operator=(const ListAllRequest& other45) {
  header = other45.header;
  __isset = other45.__isset;
  return *this;
}
ListAllRequest& ListAllRequest::operator=(ListAllRequest&& other46) {
  header = std::move(other46.header);
  __isset = std::move(other46.__isset);
  return *this;
}
void ListAllRequest::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "ListAllRequest(";
  out << "header=" << to_string(header);
  out << ")";
}


StatsException::~StatsException() throw() {
}


void StatsException::__set_message(const std::string& val) {
  this->message = val;
}
std::ostream& operator<<(std::ostream& out, const StatsException& obj)
{
  obj.printTo(out);
  return out;
}


void swap(StatsException &a, StatsException &b) {
  using ::std::swap;
  swap(a.message, b.message);
  swap(a.__isset, b.__isset);
}

StatsException::StatsException(const StatsException& other47) : TException() {
  message = other47.message;
  __isset = other47.__isset;
}
StatsException::StatsException( StatsException&& other48) : TException() {
  message = std::move(other48.message);
  __isset = std::move(other48.__isset);
}
StatsException& StatsException::operator=(const StatsException& other49) {
  message = other49.message;
  __isset = other49.__isset;
  return *this;
}
StatsException& StatsException::operator=(StatsException&& other50) {
  message = std::move(other50.message);
  __isset = std::move(other50.__isset);
  return *this;
}
void StatsException::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "StatsException(";
  out << "message=" << to_string(message);
  out << ")";
}

const char* StatsException::what() const throw() {
  try {
    std::stringstream ss;
    ss << "TException - service has thrown: " << *this;
    this->thriftTExceptionMessageHolder_ = ss.str();
    return this->thriftTExceptionMessageHolder_.c_str();
  } catch (const std::exception&) {
    return "TException - service has thrown: StatsException";
  }
}


ClientCall::~ClientCall() throw() {
}


void ClientCall::__set_requestSeq(const int32_t val) {
  this->requestSeq = val;
}

void ClientCall::__set_protocol(const std::string& val) {
  this->protocol = val;
}

void ClientCall::__set_method(const std::string& val) {
  this->method = val;
}

void ClientCall::__set_clientStart(const int64_t val) {
  this->clientStart = val;
}

void ClientCall::__set_clientEnd(const int64_t val) {
  this->clientEnd = val;
}

void ClientCall::__set_ok(const bool val) {
  this->ok = val;
}

void ClientCall::__set_errMsg(const std::string& val) {
  this->errMsg = val;
}
std::ostream& operator<<(std::ostream& out, const ClientCall& obj)
{
  obj.printTo(out);
  return out;
}


void swap(ClientCall &a, ClientCall &b) {
  using ::std::swap;
  swap(a.requestSeq, b.requestSeq);
  swap(a.protocol, b.protocol);
  swap(a.method, b.method);
  swap(a.clientStart, b.clientStart);
  swap(a.clientEnd, b.clientEnd);
  swap(a.ok, b.ok);
  swap(a.errMsg, b.errMsg);
  swap(a.__isset, b.__isset);
}

ClientCall::ClientCall(const ClientCall& other51) {
  requestSeq = other51.requestSeq;
  protocol = other51.protocol;
  method = other51.method;
  clientStart = other51.clientStart;
  clientEnd = other51.clientEnd;
  ok = other51.ok;
  errMsg = other51.errMsg;
  __isset = other51.__isset;
}
ClientCall::ClientCall( ClientCall&& other52) {
  requestSeq = std::move(other52.requestSeq);
  protocol = std::move(other52.protocol);
  method = std::move(other52.method);
  clientStart = std::move(other52.clientStart);
  clientEnd = std::move(other52.clientEnd);
  ok = std::move(other52.ok);
  errMsg = std::move(other52.errMsg);
  __isset = std::move(other52.__isset);
}
ClientCall& ClientCall::operator=(const ClientCall& other53) {
  requestSeq = other53.requestSeq;
  protocol = other53.protocol;
  method = other53.method;
  clientStart = other53.clientStart;
  clientEnd = other53.clientEnd;
  ok = other53.ok;
  errMsg = other53.errMsg;
  __isset = other53.__isset;
  return *this;
}
ClientCall& ClientCall::operator=(ClientCall&& other54) {
  requestSeq = std::move(other54.requestSeq);
  protocol = std::move(other54.protocol);
  method = std::move(other54.method);
  clientStart = std::move(other54.clientStart);
  clientEnd = std::move(other54.clientEnd);
  ok = std::move(other54.ok);
  errMsg = std::move(other54.errMsg);
  __isset = std::move(other54.__isset);
  return *this;
}
void ClientCall::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "ClientCall(";
  out << "requestSeq=" << to_string(requestSeq);
  out << ", " << "protocol=" << to_string(protocol);
  out << ", " << "method=" << to_string(method);
  out << ", " << "clientStart=" << to_string(clientStart);
  out << ", " << "clientEnd=" << to_string(clientEnd);
  out << ", " << "ok=" << to_string(ok);
  out << ", " << "errMsg=" << to_string(errMsg);
  out << ")";
}


TestSuite::~TestSuite() throw() {
}


void TestSuite::__set_id(const std::string& val) {
  this->id = val;
}

void TestSuite::__set_nbThread(const int32_t val) {
  this->nbThread = val;
}

void TestSuite::__set_compression(const std::string& val) {
  this->compression = val;
__isset.compression = true;
}

void TestSuite::__set_cpu(const std::string& val) {
  this->cpu = val;
}

void TestSuite::__set_memory(const std::string& val) {
  this->memory = val;
}

void TestSuite::__set_jvm(const std::string& val) {
  this->jvm = val;
}

void TestSuite::__set_vendor(const std::string& val) {
  this->vendor = val;
}

void TestSuite::__set_osFamily(const std::string& val) {
  this->osFamily = val;
}

void TestSuite::__set_osVersion(const std::string& val) {
  this->osVersion = val;
}

void TestSuite::__set_protocol(const std::string& val) {
  this->protocol = val;
}

void TestSuite::__set_comment(const std::string& val) {
  this->comment = val;
}

void TestSuite::__set_calls(const std::vector<ClientCall> & val) {
  this->calls = val;
}

void TestSuite::__set_mapper(const Mapper val) {
  this->mapper = val;
}
std::ostream& operator<<(std::ostream& out, const TestSuite& obj)
{
  obj.printTo(out);
  return out;
}


void swap(TestSuite &a, TestSuite &b) {
  using ::std::swap;
  swap(a.id, b.id);
  swap(a.nbThread, b.nbThread);
  swap(a.compression, b.compression);
  swap(a.cpu, b.cpu);
  swap(a.memory, b.memory);
  swap(a.jvm, b.jvm);
  swap(a.vendor, b.vendor);
  swap(a.osFamily, b.osFamily);
  swap(a.osVersion, b.osVersion);
  swap(a.protocol, b.protocol);
  swap(a.comment, b.comment);
  swap(a.calls, b.calls);
  swap(a.mapper, b.mapper);
  swap(a.__isset, b.__isset);
}

TestSuite::TestSuite(const TestSuite& other62) {
  id = other62.id;
  nbThread = other62.nbThread;
  compression = other62.compression;
  cpu = other62.cpu;
  memory = other62.memory;
  jvm = other62.jvm;
  vendor = other62.vendor;
  osFamily = other62.osFamily;
  osVersion = other62.osVersion;
  protocol = other62.protocol;
  comment = other62.comment;
  calls = other62.calls;
  mapper = other62.mapper;
  __isset = other62.__isset;
}
TestSuite::TestSuite( TestSuite&& other63) {
  id = std::move(other63.id);
  nbThread = std::move(other63.nbThread);
  compression = std::move(other63.compression);
  cpu = std::move(other63.cpu);
  memory = std::move(other63.memory);
  jvm = std::move(other63.jvm);
  vendor = std::move(other63.vendor);
  osFamily = std::move(other63.osFamily);
  osVersion = std::move(other63.osVersion);
  protocol = std::move(other63.protocol);
  comment = std::move(other63.comment);
  calls = std::move(other63.calls);
  mapper = std::move(other63.mapper);
  __isset = std::move(other63.__isset);
}
TestSuite& TestSuite::operator=(const TestSuite& other64) {
  id = other64.id;
  nbThread = other64.nbThread;
  compression = other64.compression;
  cpu = other64.cpu;
  memory = other64.memory;
  jvm = other64.jvm;
  vendor = other64.vendor;
  osFamily = other64.osFamily;
  osVersion = other64.osVersion;
  protocol = other64.protocol;
  comment = other64.comment;
  calls = other64.calls;
  mapper = other64.mapper;
  __isset = other64.__isset;
  return *this;
}
TestSuite& TestSuite::operator=(TestSuite&& other65) {
  id = std::move(other65.id);
  nbThread = std::move(other65.nbThread);
  compression = std::move(other65.compression);
  cpu = std::move(other65.cpu);
  memory = std::move(other65.memory);
  jvm = std::move(other65.jvm);
  vendor = std::move(other65.vendor);
  osFamily = std::move(other65.osFamily);
  osVersion = std::move(other65.osVersion);
  protocol = std::move(other65.protocol);
  comment = std::move(other65.comment);
  calls = std::move(other65.calls);
  mapper = std::move(other65.mapper);
  __isset = std::move(other65.__isset);
  return *this;
}
void TestSuite::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "TestSuite(";
  out << "id=" << to_string(id);
  out << ", " << "nbThread=" << to_string(nbThread);
  out << ", " << "compression="; (__isset.compression ? (out << to_string(compression)) : (out << "<null>"));
  out << ", " << "cpu=" << to_string(cpu);
  out << ", " << "memory=" << to_string(memory);
  out << ", " << "jvm=" << to_string(jvm);
  out << ", " << "vendor=" << to_string(vendor);
  out << ", " << "osFamily=" << to_string(osFamily);
  out << ", " << "osVersion=" << to_string(osVersion);
  out << ", " << "protocol=" << to_string(protocol);
  out << ", " << "comment=" << to_string(comment);
  out << ", " << "calls=" << to_string(calls);
  out << ", " << "mapper=" << to_string(mapper);
  out << ")";
}


