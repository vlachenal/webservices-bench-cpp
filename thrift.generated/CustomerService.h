/**
 * Autogenerated by Thrift Compiler (0.11.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef CustomerService_H
#define CustomerService_H

#include <thrift/TDispatchProcessor.h>
#include <thrift/async/TConcurrentClientSyncInfo.h>
#include "customer_types.h"



#ifdef _MSC_VER
  #pragma warning( push )
  #pragma warning (disable : 4250 ) //inheriting methods via dominance 
#endif

class CustomerServiceIf {
 public:
  virtual ~CustomerServiceIf() {}

  /**
   * List all customers in database
   * 
   * @param request the request
   * 
   * @return customers
   * 
   * @throws CustomerException any error
   * @throws TException unexpected error
   * 
   * @param request
   */
  virtual void listCustomers(std::vector<Customer> & _return, const ListAllRequest& request) = 0;

  /**
   * Retrieve customer details
   * 
   * @param request the get details request
   * 
   * @return the customer details
   * 
   * @throws CustomerException any error
   * @throws TException unexpected error
   * 
   * @param request
   */
  virtual void get(Customer& _return, const GetRequest& request) = 0;

  /**
   * Create customer
   * 
   * @param request the create request
   * 
   * @return the new customer's identifier
   * 
   * @throws CustomerException any error
   * @throws TException unexpected error
   * 
   * @param request
   */
  virtual void create(std::string& _return, const CreateRequest& request) = 0;

  /**
   * Delete all customers
   * 
   * @throws CustomerException any error
   * @throws TException unexpected error
   */
  virtual void deleteAll() = 0;
};

class CustomerServiceIfFactory {
 public:
  typedef CustomerServiceIf Handler;

  virtual ~CustomerServiceIfFactory() {}

  virtual CustomerServiceIf* getHandler(const ::apache::thrift::TConnectionInfo& connInfo) = 0;
  virtual void releaseHandler(CustomerServiceIf* /* handler */) = 0;
};

class CustomerServiceIfSingletonFactory : virtual public CustomerServiceIfFactory {
 public:
  CustomerServiceIfSingletonFactory(const ::apache::thrift::stdcxx::shared_ptr<CustomerServiceIf>& iface) : iface_(iface) {}
  virtual ~CustomerServiceIfSingletonFactory() {}

  virtual CustomerServiceIf* getHandler(const ::apache::thrift::TConnectionInfo&) {
    return iface_.get();
  }
  virtual void releaseHandler(CustomerServiceIf* /* handler */) {}

 protected:
  ::apache::thrift::stdcxx::shared_ptr<CustomerServiceIf> iface_;
};

class CustomerServiceNull : virtual public CustomerServiceIf {
 public:
  virtual ~CustomerServiceNull() {}
  void listCustomers(std::vector<Customer> & /* _return */, const ListAllRequest& /* request */) {
    return;
  }
  void get(Customer& /* _return */, const GetRequest& /* request */) {
    return;
  }
  void create(std::string& /* _return */, const CreateRequest& /* request */) {
    return;
  }
  void deleteAll() {
    return;
  }
};

typedef struct _CustomerService_listCustomers_args__isset {
  _CustomerService_listCustomers_args__isset() : request(false) {}
  bool request :1;
} _CustomerService_listCustomers_args__isset;

class CustomerService_listCustomers_args {
 public:

  CustomerService_listCustomers_args(const CustomerService_listCustomers_args&);
  CustomerService_listCustomers_args(CustomerService_listCustomers_args&&);
  CustomerService_listCustomers_args& operator=(const CustomerService_listCustomers_args&);
  CustomerService_listCustomers_args& operator=(CustomerService_listCustomers_args&&);
  CustomerService_listCustomers_args() {
  }

  virtual ~CustomerService_listCustomers_args() throw();
  ListAllRequest request;

  _CustomerService_listCustomers_args__isset __isset;

  void __set_request(const ListAllRequest& val);

  bool operator == (const CustomerService_listCustomers_args & rhs) const
  {
    if (!(request == rhs.request))
      return false;
    return true;
  }
  bool operator != (const CustomerService_listCustomers_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CustomerService_listCustomers_args & ) const;

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

};


class CustomerService_listCustomers_pargs {
 public:


  virtual ~CustomerService_listCustomers_pargs() throw();
  const ListAllRequest* request;

  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

};

typedef struct _CustomerService_listCustomers_result__isset {
  _CustomerService_listCustomers_result__isset() : success(false), error(false) {}
  bool success :1;
  bool error :1;
} _CustomerService_listCustomers_result__isset;

class CustomerService_listCustomers_result {
 public:

  CustomerService_listCustomers_result(const CustomerService_listCustomers_result&);
  CustomerService_listCustomers_result(CustomerService_listCustomers_result&&);
  CustomerService_listCustomers_result& operator=(const CustomerService_listCustomers_result&);
  CustomerService_listCustomers_result& operator=(CustomerService_listCustomers_result&&);
  CustomerService_listCustomers_result() {
  }

  virtual ~CustomerService_listCustomers_result() throw();
  std::vector<Customer>  success;
  CustomerException error;

  _CustomerService_listCustomers_result__isset __isset;

  void __set_success(const std::vector<Customer> & val);

  void __set_error(const CustomerException& val);

  bool operator == (const CustomerService_listCustomers_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(error == rhs.error))
      return false;
    return true;
  }
  bool operator != (const CustomerService_listCustomers_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CustomerService_listCustomers_result & ) const;

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

};

typedef struct _CustomerService_listCustomers_presult__isset {
  _CustomerService_listCustomers_presult__isset() : success(false), error(false) {}
  bool success :1;
  bool error :1;
} _CustomerService_listCustomers_presult__isset;

class CustomerService_listCustomers_presult {
 public:


  virtual ~CustomerService_listCustomers_presult() throw();
  std::vector<Customer> * success;
  CustomerException error;

  _CustomerService_listCustomers_presult__isset __isset;

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);

};

typedef struct _CustomerService_get_args__isset {
  _CustomerService_get_args__isset() : request(false) {}
  bool request :1;
} _CustomerService_get_args__isset;

class CustomerService_get_args {
 public:

  CustomerService_get_args(const CustomerService_get_args&);
  CustomerService_get_args(CustomerService_get_args&&);
  CustomerService_get_args& operator=(const CustomerService_get_args&);
  CustomerService_get_args& operator=(CustomerService_get_args&&);
  CustomerService_get_args() {
  }

  virtual ~CustomerService_get_args() throw();
  GetRequest request;

  _CustomerService_get_args__isset __isset;

  void __set_request(const GetRequest& val);

  bool operator == (const CustomerService_get_args & rhs) const
  {
    if (!(request == rhs.request))
      return false;
    return true;
  }
  bool operator != (const CustomerService_get_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CustomerService_get_args & ) const;

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

};


class CustomerService_get_pargs {
 public:


  virtual ~CustomerService_get_pargs() throw();
  const GetRequest* request;

  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

};

typedef struct _CustomerService_get_result__isset {
  _CustomerService_get_result__isset() : success(false), error(false) {}
  bool success :1;
  bool error :1;
} _CustomerService_get_result__isset;

class CustomerService_get_result {
 public:

  CustomerService_get_result(const CustomerService_get_result&);
  CustomerService_get_result(CustomerService_get_result&&);
  CustomerService_get_result& operator=(const CustomerService_get_result&);
  CustomerService_get_result& operator=(CustomerService_get_result&&);
  CustomerService_get_result() {
  }

  virtual ~CustomerService_get_result() throw();
  Customer success;
  CustomerException error;

  _CustomerService_get_result__isset __isset;

  void __set_success(const Customer& val);

  void __set_error(const CustomerException& val);

  bool operator == (const CustomerService_get_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(error == rhs.error))
      return false;
    return true;
  }
  bool operator != (const CustomerService_get_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CustomerService_get_result & ) const;

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

};

typedef struct _CustomerService_get_presult__isset {
  _CustomerService_get_presult__isset() : success(false), error(false) {}
  bool success :1;
  bool error :1;
} _CustomerService_get_presult__isset;

class CustomerService_get_presult {
 public:


  virtual ~CustomerService_get_presult() throw();
  Customer* success;
  CustomerException error;

  _CustomerService_get_presult__isset __isset;

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);

};

typedef struct _CustomerService_create_args__isset {
  _CustomerService_create_args__isset() : request(false) {}
  bool request :1;
} _CustomerService_create_args__isset;

class CustomerService_create_args {
 public:

  CustomerService_create_args(const CustomerService_create_args&);
  CustomerService_create_args(CustomerService_create_args&&);
  CustomerService_create_args& operator=(const CustomerService_create_args&);
  CustomerService_create_args& operator=(CustomerService_create_args&&);
  CustomerService_create_args() {
  }

  virtual ~CustomerService_create_args() throw();
  CreateRequest request;

  _CustomerService_create_args__isset __isset;

  void __set_request(const CreateRequest& val);

  bool operator == (const CustomerService_create_args & rhs) const
  {
    if (!(request == rhs.request))
      return false;
    return true;
  }
  bool operator != (const CustomerService_create_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CustomerService_create_args & ) const;

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

};


class CustomerService_create_pargs {
 public:


  virtual ~CustomerService_create_pargs() throw();
  const CreateRequest* request;

  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

};

typedef struct _CustomerService_create_result__isset {
  _CustomerService_create_result__isset() : success(false), error(false) {}
  bool success :1;
  bool error :1;
} _CustomerService_create_result__isset;

class CustomerService_create_result {
 public:

  CustomerService_create_result(const CustomerService_create_result&);
  CustomerService_create_result(CustomerService_create_result&&);
  CustomerService_create_result& operator=(const CustomerService_create_result&);
  CustomerService_create_result& operator=(CustomerService_create_result&&);
  CustomerService_create_result() : success() {
  }

  virtual ~CustomerService_create_result() throw();
  std::string success;
  CustomerException error;

  _CustomerService_create_result__isset __isset;

  void __set_success(const std::string& val);

  void __set_error(const CustomerException& val);

  bool operator == (const CustomerService_create_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(error == rhs.error))
      return false;
    return true;
  }
  bool operator != (const CustomerService_create_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CustomerService_create_result & ) const;

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

};

typedef struct _CustomerService_create_presult__isset {
  _CustomerService_create_presult__isset() : success(false), error(false) {}
  bool success :1;
  bool error :1;
} _CustomerService_create_presult__isset;

class CustomerService_create_presult {
 public:


  virtual ~CustomerService_create_presult() throw();
  std::string* success;
  CustomerException error;

  _CustomerService_create_presult__isset __isset;

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);

};


class CustomerService_deleteAll_args {
 public:

  CustomerService_deleteAll_args(const CustomerService_deleteAll_args&);
  CustomerService_deleteAll_args(CustomerService_deleteAll_args&&);
  CustomerService_deleteAll_args& operator=(const CustomerService_deleteAll_args&);
  CustomerService_deleteAll_args& operator=(CustomerService_deleteAll_args&&);
  CustomerService_deleteAll_args() {
  }

  virtual ~CustomerService_deleteAll_args() throw();

  bool operator == (const CustomerService_deleteAll_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const CustomerService_deleteAll_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CustomerService_deleteAll_args & ) const;

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

};


class CustomerService_deleteAll_pargs {
 public:


  virtual ~CustomerService_deleteAll_pargs() throw();

  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

};

typedef struct _CustomerService_deleteAll_result__isset {
  _CustomerService_deleteAll_result__isset() : error(false) {}
  bool error :1;
} _CustomerService_deleteAll_result__isset;

class CustomerService_deleteAll_result {
 public:

  CustomerService_deleteAll_result(const CustomerService_deleteAll_result&);
  CustomerService_deleteAll_result(CustomerService_deleteAll_result&&);
  CustomerService_deleteAll_result& operator=(const CustomerService_deleteAll_result&);
  CustomerService_deleteAll_result& operator=(CustomerService_deleteAll_result&&);
  CustomerService_deleteAll_result() {
  }

  virtual ~CustomerService_deleteAll_result() throw();
  CustomerException error;

  _CustomerService_deleteAll_result__isset __isset;

  void __set_error(const CustomerException& val);

  bool operator == (const CustomerService_deleteAll_result & rhs) const
  {
    if (!(error == rhs.error))
      return false;
    return true;
  }
  bool operator != (const CustomerService_deleteAll_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CustomerService_deleteAll_result & ) const;

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

};

typedef struct _CustomerService_deleteAll_presult__isset {
  _CustomerService_deleteAll_presult__isset() : error(false) {}
  bool error :1;
} _CustomerService_deleteAll_presult__isset;

class CustomerService_deleteAll_presult {
 public:


  virtual ~CustomerService_deleteAll_presult() throw();
  CustomerException error;

  _CustomerService_deleteAll_presult__isset __isset;

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);

};

template <class Protocol_>
class CustomerServiceClientT : virtual public CustomerServiceIf {
 public:
  CustomerServiceClientT(apache::thrift::stdcxx::shared_ptr< Protocol_> prot) {
    setProtocolT(prot);
  }
  CustomerServiceClientT(apache::thrift::stdcxx::shared_ptr< Protocol_> iprot, apache::thrift::stdcxx::shared_ptr< Protocol_> oprot) {
    setProtocolT(iprot,oprot);
  }
 private:
  void setProtocolT(apache::thrift::stdcxx::shared_ptr< Protocol_> prot) {
  setProtocolT(prot,prot);
  }
  void setProtocolT(apache::thrift::stdcxx::shared_ptr< Protocol_> iprot, apache::thrift::stdcxx::shared_ptr< Protocol_> oprot) {
    piprot_=iprot;
    poprot_=oprot;
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
 public:
  apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return this->piprot_;
  }
  apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return this->poprot_;
  }
  void listCustomers(std::vector<Customer> & _return, const ListAllRequest& request);
  void send_listCustomers(const ListAllRequest& request);
  void recv_listCustomers(std::vector<Customer> & _return);
  void get(Customer& _return, const GetRequest& request);
  void send_get(const GetRequest& request);
  void recv_get(Customer& _return);
  void create(std::string& _return, const CreateRequest& request);
  void send_create(const CreateRequest& request);
  void recv_create(std::string& _return);
  void deleteAll();
  void send_deleteAll();
  void recv_deleteAll();
 protected:
  apache::thrift::stdcxx::shared_ptr< Protocol_> piprot_;
  apache::thrift::stdcxx::shared_ptr< Protocol_> poprot_;
  Protocol_* iprot_;
  Protocol_* oprot_;
};

typedef CustomerServiceClientT< ::apache::thrift::protocol::TProtocol> CustomerServiceClient;

template <class Protocol_>
class CustomerServiceProcessorT : public ::apache::thrift::TDispatchProcessorT<Protocol_> {
 protected:
  ::apache::thrift::stdcxx::shared_ptr<CustomerServiceIf> iface_;
  virtual bool dispatchCall(::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, const std::string& fname, int32_t seqid, void* callContext);
  virtual bool dispatchCallTemplated(Protocol_* iprot, Protocol_* oprot, const std::string& fname, int32_t seqid, void* callContext);
 private:
  typedef  void (CustomerServiceProcessorT::*ProcessFunction)(int32_t, ::apache::thrift::protocol::TProtocol*, ::apache::thrift::protocol::TProtocol*, void*);
  typedef void (CustomerServiceProcessorT::*SpecializedProcessFunction)(int32_t, Protocol_*, Protocol_*, void*);
  struct ProcessFunctions {
    ProcessFunction generic;
    SpecializedProcessFunction specialized;
    ProcessFunctions(ProcessFunction g, SpecializedProcessFunction s) :
      generic(g),
      specialized(s) {}
    ProcessFunctions() : generic(NULL), specialized(NULL) {}
  };
  typedef std::map<std::string, ProcessFunctions> ProcessMap;
  ProcessMap processMap_;
  void process_listCustomers(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_listCustomers(int32_t seqid, Protocol_* iprot, Protocol_* oprot, void* callContext);
  void process_get(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_get(int32_t seqid, Protocol_* iprot, Protocol_* oprot, void* callContext);
  void process_create(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_create(int32_t seqid, Protocol_* iprot, Protocol_* oprot, void* callContext);
  void process_deleteAll(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_deleteAll(int32_t seqid, Protocol_* iprot, Protocol_* oprot, void* callContext);
 public:
  CustomerServiceProcessorT(::apache::thrift::stdcxx::shared_ptr<CustomerServiceIf> iface) :
    iface_(iface) {
    processMap_["listCustomers"] = ProcessFunctions(
      &CustomerServiceProcessorT::process_listCustomers,
      &CustomerServiceProcessorT::process_listCustomers);
    processMap_["get"] = ProcessFunctions(
      &CustomerServiceProcessorT::process_get,
      &CustomerServiceProcessorT::process_get);
    processMap_["create"] = ProcessFunctions(
      &CustomerServiceProcessorT::process_create,
      &CustomerServiceProcessorT::process_create);
    processMap_["deleteAll"] = ProcessFunctions(
      &CustomerServiceProcessorT::process_deleteAll,
      &CustomerServiceProcessorT::process_deleteAll);
  }

  virtual ~CustomerServiceProcessorT() {}
};

typedef CustomerServiceProcessorT< ::apache::thrift::protocol::TDummyProtocol > CustomerServiceProcessor;

template <class Protocol_>
class CustomerServiceProcessorFactoryT : public ::apache::thrift::TProcessorFactory {
 public:
  CustomerServiceProcessorFactoryT(const ::apache::thrift::stdcxx::shared_ptr< CustomerServiceIfFactory >& handlerFactory) :
      handlerFactory_(handlerFactory) {}

  ::apache::thrift::stdcxx::shared_ptr< ::apache::thrift::TProcessor > getProcessor(const ::apache::thrift::TConnectionInfo& connInfo);

 protected:
  ::apache::thrift::stdcxx::shared_ptr< CustomerServiceIfFactory > handlerFactory_;
};

typedef CustomerServiceProcessorFactoryT< ::apache::thrift::protocol::TDummyProtocol > CustomerServiceProcessorFactory;

class CustomerServiceMultiface : virtual public CustomerServiceIf {
 public:
  CustomerServiceMultiface(std::vector<apache::thrift::stdcxx::shared_ptr<CustomerServiceIf> >& ifaces) : ifaces_(ifaces) {
  }
  virtual ~CustomerServiceMultiface() {}
 protected:
  std::vector<apache::thrift::stdcxx::shared_ptr<CustomerServiceIf> > ifaces_;
  CustomerServiceMultiface() {}
  void add(::apache::thrift::stdcxx::shared_ptr<CustomerServiceIf> iface) {
    ifaces_.push_back(iface);
  }
 public:
  void listCustomers(std::vector<Customer> & _return, const ListAllRequest& request) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->listCustomers(_return, request);
    }
    ifaces_[i]->listCustomers(_return, request);
    return;
  }

  void get(Customer& _return, const GetRequest& request) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->get(_return, request);
    }
    ifaces_[i]->get(_return, request);
    return;
  }

  void create(std::string& _return, const CreateRequest& request) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->create(_return, request);
    }
    ifaces_[i]->create(_return, request);
    return;
  }

  void deleteAll() {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->deleteAll();
    }
    ifaces_[i]->deleteAll();
  }

};

// The 'concurrent' client is a thread safe client that correctly handles
// out of order responses.  It is slower than the regular client, so should
// only be used when you need to share a connection among multiple threads
template <class Protocol_>
class CustomerServiceConcurrentClientT : virtual public CustomerServiceIf {
 public:
  CustomerServiceConcurrentClientT(apache::thrift::stdcxx::shared_ptr< Protocol_> prot) {
    setProtocolT(prot);
  }
  CustomerServiceConcurrentClientT(apache::thrift::stdcxx::shared_ptr< Protocol_> iprot, apache::thrift::stdcxx::shared_ptr< Protocol_> oprot) {
    setProtocolT(iprot,oprot);
  }
 private:
  void setProtocolT(apache::thrift::stdcxx::shared_ptr< Protocol_> prot) {
  setProtocolT(prot,prot);
  }
  void setProtocolT(apache::thrift::stdcxx::shared_ptr< Protocol_> iprot, apache::thrift::stdcxx::shared_ptr< Protocol_> oprot) {
    piprot_=iprot;
    poprot_=oprot;
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
 public:
  apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return this->piprot_;
  }
  apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return this->poprot_;
  }
  void listCustomers(std::vector<Customer> & _return, const ListAllRequest& request);
  int32_t send_listCustomers(const ListAllRequest& request);
  void recv_listCustomers(std::vector<Customer> & _return, const int32_t seqid);
  void get(Customer& _return, const GetRequest& request);
  int32_t send_get(const GetRequest& request);
  void recv_get(Customer& _return, const int32_t seqid);
  void create(std::string& _return, const CreateRequest& request);
  int32_t send_create(const CreateRequest& request);
  void recv_create(std::string& _return, const int32_t seqid);
  void deleteAll();
  int32_t send_deleteAll();
  void recv_deleteAll(const int32_t seqid);
 protected:
  apache::thrift::stdcxx::shared_ptr< Protocol_> piprot_;
  apache::thrift::stdcxx::shared_ptr< Protocol_> poprot_;
  Protocol_* iprot_;
  Protocol_* oprot_;
  ::apache::thrift::async::TConcurrentClientSyncInfo sync_;
};

typedef CustomerServiceConcurrentClientT< ::apache::thrift::protocol::TProtocol> CustomerServiceConcurrentClient;

#ifdef _MSC_VER
  #pragma warning( pop )
#endif



#include "CustomerService.tcc"
#include "customer_types.tcc"

#endif
